global proc Renamer()
{
    if (`window -q -exists Rename_toolWindow`) deleteUI Rename_toolWindow;
  
    window -s 0 -title "Rename_tool" -maximizeButton 0 -minimizeButton 1 Rename_toolWindow;
  
    columnLayout;
    rowColumnLayout -numberOfColumns 1 -columnWidth 1 313 ;
  
    rowColumnLayout -numberOfColumns 3 -cs 1 10 -columnWidth 1 70 -columnWidth 2 170 -columnWidth 3 56;
	    text -l " Rename:";
	    textFieldGrp -label "" -text "name_####_suffix" -columnWidth 1 10 -columnWidth 2 153 Rename_obj;
	    button -h 23 -w 48 -l "Rename" -bgc 0.1 0.2 0.2 -c "Rename_Main()"; 
	    setParent ..;
    separator -style "in" -w 315 ;
    
    window -e -wh 313 100 Rename_toolWindow;
    showWindow Rename_toolWindow;    
}


global proc Rename_Main ()
{
    string $search = `textFieldGrp -q -text Rename_obj`;
    
    if ($search != "")
    {
        evalEcho ("Rename_totalRename \"" + $search + "\"");        
    }    
}



global proc string replace_Hash (string $string, int $number)
{
    string $result;
    
    //Finds any # characters in $string.
    string $substring = "#+";
    $substring = `match $substring $string`;
    
    //Switches out # for 0.
    string $subStringNum = substituteAllString ($substring, "#", "0");
    string $stringNum = $number; 
    string $newString = ($subStringNum + $stringNum);
    
    int $totalSize = `size ($newString)`;
    int $numSize = `size ($stringNum)`;
    
    if ($numSize < size ($subStringNum))
    {
        $numSize = $numSize + 1;
        $stringNum = `substring $newString $numSize $totalSize`;
    }
    
    $result = `substitute $substring $string $stringNum`;
    return $result;    
}

global proc string [] Rename_totalRename (string $newName)
{
    string $objects[0];
    int $count = 0;
    string $return[0];

    $objects = `ls -selection`;

    if (size($objects) > 0)
    {
        $node = `createNode unknown`;
        addAttr -longName "selObjects" -attributeType message -multi -indexMatters 0;

        for ($obj in $objects)
        {
            //$obj + ".message" equates to the name of each object, but is not stored as a string.
            //$node + ".selObjects" euqates to the empty node created to hold long names.
            //connectAttr basically connects the message attribute name of each object as a long name in the node.
            connectAttr -nextAvailable ($obj + ".message") ($node + ".selObjects");
        }
        
        //After all connections have been made, all names that have been pointed to ".selObjects" are saved as an integer in $con.
        $con = `listConnections ($node + ".selObjects")`;
       
        for ($i = 0; $i < size($con); $i++)
        {
            string $tmp[0];
            
            //$tmp pulls the .message long name of each object in the node.
            $tmp = `listConnections ($node + ".selObjects["+$i+"]")`;
            string $object = $tmp[0];
            
            //runs replace_Hash and saves it.      
            $name = `replace_Hash $newName ($i + 1)`;

            $result = `rename $object $name`;
            
            print ("Renamed: " + $object + " --> " + $result + "\n");
        } 
        
        $return = `listConnections ($node + ".selObjects")`;
        delete $node;

    }
    
    if ((`size $return`) > 0)
    {
        select $return;
    } 
        
    return $return;
}