global proc makeCTRL ()
{
	
	$selection = `ls -sl`;
	int $size = `size ($selection)`;
	
	if ($size == 0)
	error "Please select one or more objects.";
	
	float $controlSize = `floatSliderGrp -q -v controlSize`;
	
	$color = `colorIndexSliderGrp -q -v controlColor`;
	$color = $color - 1;
	
    string $controlSuff;
    $controlSuff = `textFieldGrp -q -text controlName`;
    
    int $ctrlShape = `intSliderGrp -q -v ctrlShape`;

	for ($i=0; $i<$size; $i++)
	{
	    if (`objExists ($selection[0]+$controlSuff)` == 1)
	    error "Please enter a different suffix.";
	}
		
	if ($controlSuff == "")
	error "Please enter a suffix.";
	
		
	for ($i=0; $i<$size; $i++)
	{
	    string $object1[];
	    string $objectShape1[];	  

		//creates Circle controls
		if ($ctrlShape == 0)
		{
		    $object1 = `circle -nr 1 0 0 -ch 0`;
		    $objectShape1 = `pickWalk -d down`;
		    
		    setAttr ($objectShape1[0] + ".overrideEnabled") 1;
		
		    setAttr ($objectShape1[0] + ".overrideColor") $color ;		    
		}
		
		//creates Square controls
		else if ($ctrlShape == 1)
		{		    
		    $object1 = `nurbsSquare -c 0 0 0 -nr 0 1 0 -sl1 2 -sl2 2 -sps 1 -d 3 -ch 1`;
		    $objectShape1 = `pickWalk -d down`;
		    $objectShape2 = `pickWalk -d right`;
		    $objectShape3 = `pickWalk -d right`;
		    $objectShape4 = `pickWalk -d right`;
		    
		    setAttr ($objectShape1[0] + ".overrideEnabled") 1;
		    setAttr ($objectShape2[0] + ".overrideEnabled") 1;
		    setAttr ($objectShape3[0] + ".overrideEnabled") 1;
		    setAttr ($objectShape4[0] + ".overrideEnabled") 1;
		
		    setAttr ($objectShape1[0] + ".overrideColor") $color ;
		    setAttr ($objectShape2[0] + ".overrideColor") $color ;
		    setAttr ($objectShape3[0] + ".overrideColor") $color ;
		    setAttr ($objectShape4[0] + ".overrideColor") $color ;
		    
		    		    		 
		}
		
		//creates Sphere controls
		else if ($ctrlShape == 2)
		{		    
		    $object1 =`circle -nr 1 0 0 -ch 0`;
		    $objectShape1 = `pickWalk -d down`;
		    $object2 =`circle -nr 0 1 0 -ch 0`;
		    $objectShape2 = `pickWalk -d down`;
		    $object3 =`circle -nr 0 0 1 -ch 0`;
		    $objectShape3 = `pickWalk -d down`;
		
		    setAttr ($objectShape1[0] + ".overrideEnabled") 1;
		    setAttr ($objectShape2[0] + ".overrideEnabled") 1;
		    setAttr ($objectShape3[0] + ".overrideEnabled") 1;
		
		    setAttr ($objectShape1[0] + ".overrideColor") $color ;
		    setAttr ($objectShape2[0] + ".overrideColor") $color ;
		    setAttr ($objectShape3[0] + ".overrideColor") $color ;
		
		    parent -shape -r $objectShape3 $objectShape2 $object1[0];
		    delete $object2[0];
		    delete $object3[0];		 		    
		}

		


		rename $object1[0] ($selection[$i]+ $controlSuff);
		select ($selection[$i]+ $controlSuff);
		scale -r ($controlSize *.25) ($controlSize *.25) ($controlSize *.25);
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		
		//creates an offset node
		group -em -n ($selection[$i]+"_offset");
		$tempConstraint = `orientConstraint $selection[$i] ($selection[$i]+"_offset")`;
		delete $tempConstraint;
		$tempConstraint = `pointConstraint $selection[$i] ($selection[$i]+"_offset")`;
		delete $tempConstraint;

		parent ($selection[$i]+ $controlSuff) ($selection[$i]+"_offset");
		
		//parents all controls to the appropriate parent control
		if ($i>=1)
			parent ($selection[$i]+"_offset")  ($selection[$i-1]+$controlSuff);
		
		//sets their attributes to zero
		setAttr ($selection[$i]+ $controlSuff+".tx") 0;
		setAttr ($selection[$i]+ $controlSuff+".ty") 0;
		setAttr ($selection[$i]+ $controlSuff+".tz") 0;
		
		setAttr ($selection[$i]+ $controlSuff+".rx") 0;
		setAttr ($selection[$i]+ $controlSuff+".ry") 0;
		setAttr ($selection[$i]+ $controlSuff+".rz") 0;
		
		//connects FK controls directly to joint rotations
		parentConstraint -mo ($selection[$i]+ $controlSuff) ($selection[$i])  ;
	
	
	}
		
		//constrains control hierarchy to parent joint (if it exists)

		string $selectionParent = "noParent";
		
		for ($i=0;$i<$size;$i++)
		{
		$parent = `listRelatives -parent $selection[$i]`;
		if (`size($parent)` > 0)
		    {
		        string $parentCheck = $parent[0];
		        $check = stringArrayContains($parentCheck, $selection);
		        if ($check == 0)
		        $selectionParent = $parentCheck;
		    }
		
		}
		
        if ($selectionParent != "noParent")
		    parentConstraint -mo $selectionParent ($selection[0]+"_offset");

}




global proc createFKControls()
{    

	if (`window -exists makeFKWindow`)
	deleteUI makeFKWindow;

	string $text;

	$sel = `ls -sl`;	
    	if (`size ($sel)` >= 1)
    	{
    	$text = $sel[0];
    
    	window -title "Create FK Controllers" makeFKWindow;
    	columnLayout -adj true makeFKColumn ;
    
    
    
    	floatSliderGrp 
    	-label "Control Size" 
    	-field true
    	-cw 1  80
    	-cw 2  40
    	-cw 3 150
       -minValue .01 
    	-maxValue 50.0
       -fieldMinValue .1 
    	-fieldMaxValue 50
       -value 2
    	controlSize;
    	
    	colorIndexSliderGrp 
    	-cw 1  80
    	-cw 2  40
    	-label "Control Color" 
    	-min 0 
    	-max 31 
    	-value 5
    	controlColor;
    	
    	intSliderGrp
    	-label "Control Shape" 
    	-field true    	
    	-cw 1 80
    	-cw 2 40
    	-cw 3 80
    	-minValue 0
    	-maxValue 2
       -fieldMinValue 0 
    	-fieldMaxValue 2
       -value 0
       ctrlShape;   	
    
        textFieldGrp
    	-cw 1  80
    	-cw 2 200
       -label "Control Suffix"
       -text  ("_CTRL")
    	controlName;

    	button
    	-label "EXECUTE"
    	-command "makeCTRL"
    	createFKButton;
    	
    	$originalSelection = `ls -sl`;
    
        
        select -r $originalSelection;
    
        
    	showWindow makeFKWindow;
    	window -edit -wh 310 110 makeFKWindow;
    	
    	if (`size($sel)` >= 1)
        textFieldGrp -e -text "_CTRL" -editable true controlName;
	}
}
createFKControls;

